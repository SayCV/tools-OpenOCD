################################################################################
# Atmel AT91SAM9X25-EK eval board
################################################################################

source [find mem_helper.tcl]
source [find target/at91sam9x25.cfg]
uplevel #0 [list source [find chip/atmel/at91/hardware.cfg]]
uplevel #0 [list source [find chip/atmel/at91/at91sam9x5.cfg]]
uplevel #0 [list source [find chip/atmel/at91/at91sam9x5_matrix.cfg]]
# uplevel #0 [list source [find chip/atmel/at91/at91sam9_init.cfg]]

# By default S1 is open and this means that NTRST is not connected.
# The reset_config in target/at91sam9261.cfg is overridden here.
# (or S1 must be populated with a 0 Ohm resistor)
reset_config srst_only

scan_chain
$_TARGETNAME configure -event gdb-attach { reset init }
$_TARGETNAME configure -event reset-init { at91sam9x25ek_reset_init }
$_TARGETNAME configure -event reset-start { at91sam9x25ek_reset_start }

proc at91sam9x25ek_reset_start { } {

	arm7_9 fast_memory_access disable

	jtag_rclk 8
	halt
	wait_halt 10000
	set rstc_mr_val [expr $::AT91_RSTC_KEY]
	set rstc_mr_val [expr ($rstc_mr_val | (5 << 8))]
	set rstc_mr_val [expr ($rstc_mr_val | $::AT91_RSTC_URSTEN)]
	mww $::AT91_RSTC_MR $rstc_mr_val	;# RSTC_MR : enable user reset.
}

;#####################################################################
;#
;#       at91sam9x25ek_PllSetting()
;# Function description
;#   Initializes the PMC.
;#   1. Enable the Main Oscillator
;#   2. Configure PLL
;#   3. Switch Master
;#
proc at91sam9x25ek_PllSetting { } {
{
    ;# "Switch to PLL + prescaler";
    set read [expr [mrw 0xFFFFFC30]]
    set read [expr ($read & ~(0x3))]
    set read [expr ($read | 1)]
    mww [expr 0xFFFFFC30] $read
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 3)] == 0 } { sleep 1 }
    
    ;# "Switch to main Osc";
    mww [expr 0xFFFFFC20] 0x01374009
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 0)] == 0 } { sleep 1 }
    
    ;# "PLLA 0";
    mww [expr 0xFFFFFC28] 0x0
    
    ;# "Initialize PLLA";
    mww [expr 0xFFFFFC28] 0x20C73F03
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 1)] == 0 } { sleep 1 }
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 3)] == 0 } { sleep 1 }

    ;# "Switch to main oscillator + prescaler";
    set read [expr [mrw 0xFFFFFC30]]
    set read [expr ($read & ~(0x3 << 8))]
    set read [expr ($read | ((0x3 << 8) | (0x1 << 12)))]
    mww [expr 0xFFFFFC30] $read
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 3)] == 0 } { sleep 1 }

    ;# "Switch to main oscillator + prescaler";
    set read [expr [mrw 0xFFFFFC30]]
    set read [expr ($read & ~(0x7 << 4))]
    set read [expr ($read | (0x7 << 4))]
    mww [expr 0xFFFFFC30] $read
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 3)] == 0 } { sleep 1 }

    ;# "Switch to PLL + prescaler";
    set read [expr [mrw 0xFFFFFC30]]
    set read [expr ($read & ~(0x3))]
    set read [expr ($read | 2)]
    mww [expr 0xFFFFFC30] $read
    while { [expr [mrw 0xFFFFFC68] & (0x1 << 3)] == 0 } { sleep 1 }

}

;#####################################################################
;#
;#       at91sam9x25ek_MapRAMAt0()
;# Function description
;#   Remap RAM at 0
;#
proc at91sam9x25ek_MapRAMAt0()
{
		;# Test and set Remap
  	set read [expr [mrw 0x00000000]]

    if { [expr [mrw 0x00000000] ] != 0xAAAAAAAA } { mww [expr 0xFFFFE100] 0x03 }
    else { mww [expr 0xFFFFE100] $read }

}

;#####################################################################
;#
;#       at91sam9x25ek_initDDRAM()
;# Function description
;#   Configuring the MICRON DDRAM controller
;#
proc at91sam9x25ek_initDDRAM()
{
    
    ;# "-------------------------------Configuring the DDRAM controller------------\n";
    ;# "-------------------------------MICRON DDRAM configuration------------------\n";

    ;# 0xFFFFE600 DDR2C Base Address

     ;# *ADDR_CCFG_EBICSA = 0x01020002; /* EBI Chip Select 1 is assigned to the DDR2SDR Controller */
     ;#__writeMemory32(0x01020002,0xFFFFDF20,"Memory");  /* Rev. A EK*/  
	 ;#__writeMemory32(0x0102030A,0xFFFFDF20,"Memory");    /* Rev. B EK and VB */
	 mww [expr 0xFFFFDF20] 0x0102030A
 
     ;# Enable DDR2 clock x2 in PMC 
     ;#PMC->PMC_SCER = PMC_SCER_DDRCK; */
    ;#__writeMemory32(0x04,0xFFFFFC00,"Memory");  
   mww [expr 0xFFFFFC00] 0x04
   
    ;# Configure the DDR controller
    
    ;# Disable anticipated read
    ;#WRITE(pDdrc, HDDRSDRC2_HS, (READ(pDdrc, HDDRSDRC2_HS) | AT91C_DDRC2_NO_ANT));
    set tempVal [expr [mrw 0xFFFFE82C]]
    set tempVal [expr ($tempVal | 0x04)]
    mww [expr 0xFFFFFC30] $tempVal
    
    
    ;# -----------------------Step 1------------------- 
    ;# Program the memory device type
    ;# ------------------------------------------------ 
    
    ;#DDRSDRC->DDRSDRC_MD = DDRSDRC_MD_MD(DDR2_SDRAM) | DDRSDRC_MD_DBW;
    ;#__writeMemory32(0x16,0xFFFFE820,"Memory");
    mww [expr 0xFFFFE820] 0x16
    
    ;# -----------------------Step 2------------------- 
    ;# 1. Program the features of DDR2-SDRAM device into 
    ;#    the Configuration Register.
    ;# 2. Program the features of DDR2-SDRAM device into 
    ;#    the Timing Register HDDRSDRC2_T0PR.    
    ;# 3. Program the features of DDR2-SDRAM device into 
    ;#    the Timing Register HDDRSDRC2_T1PR.
    ;# 4. Program the features of DDR2-SDRAM device into 
    ;#    the Timing Register HDDRSDRC2_T2PR.
    ;# ------------------------------------------------ 
    
    ;# DDRSDRC->DDRSDRC_CR = DDRSDRC_CR_NC(NC_DDR10_SDR9)  ;# 10 column bits (1K)
    ;#                      | DDRSDRC_CR_NR(NR_ROW_BIT_13) ;# 13 row bits    (8K)
    ;#                      | DDRSDRC_CR_CAS(3)            ;# CAS Latency 3
    ;#                      | (0x1 << 20);                 ;# (DDRSDRC) DDR2 8 bank
    ;#
    ;#__writeMemory32(0x0000B9,0xFFFFE808,"Memory");
    mww [expr 0xFFFFE808] 0x0000B9
    
    ;# assume timings for 7.5ns min clock period */
    ;#
    ;#DDRSDRC->DDRSDRC_T0PR = DDRSDRC_T0PR_TRAS(6)    ;#  6 * 7.5 = 45 ns
    ;#                    | DDRSDRC_T0PR_TRCD(2)    ;#  2 * 7.5 = 15 ns
    ;#                    | DDRSDRC_T0PR_TWR(2)     ;#  2 * 7.5 = 15 ns
    ;#                    | DDRSDRC_T0PR_TRC(8)     ;#  8 * 7.5 = 60 ns
    ;#                    | DDRSDRC_T0PR_TRP(2)     ;#  2 * 7.5 = 15 ns
    ;#                    | DDRSDRC_T0PR_TRRD(1)    ;#  2 * 7.5 = 15 ns
    ;#                    | DDRSDRC_T0PR_TWTR(1)    ;#  2 clock cycle
    ;#                    | DDRSDRC_T0PR_TMRD(2);   ;#  2 clock cycles
    ;#
    ;#__writeMemory32(0x21128226,0xFFFFE80C,"Memory");
    mww [expr 0xFFFFE80C] 0x21128226

    ;#
    ;#DDRSDRC->DDRSDRC_T1PR = DDRSDRC_T1PR_TRFC(18)   ;# 18 * 7.5 = 135 ns (min 127.5 ns for 1Gb DDR)
    ;#                      | DDRSDRC_T1PR_TXSNR(19)  ;# 19 * 7.5 > 142.5ns TXSNR: Exit self refresh delay to non read command
    ;#                      | DDRSDRC_T1PR_TXSRD(200) ;# min 200 clock cycles, TXSRD: Exit self refresh delay to Read command
    ;#                      | DDRSDRC_T1PR_TXP(2);    ;#  2 * 7.5 = 15 ns
    ;#
    ;#__writeMemory32(0x02c81312,0xFFFFE810,"Memory");
    mww [expr 0xFFFFE810] 0x02c81312
    
    ;#
    ;#DDRSDRC->DDRSDRC_T2PR = DDRSDRC_T2PR_TXARD(2)   ;#  min 2 clock cycles
    ;#                      | DDRSDRC_T2PR_TXARDS(7)  ;#  min 7 clock cycles
    ;#                      | DDRSDRC_T2PR_TRPA(3)
    ;#                      | DDRSDRC_T2PR_TRTP(1) ;  ;#  1 * 7.5 = 7.5 ns (min 7.5ns)
    ;#
    ;#__writeMemory32(0x0001372,0xFFFFE814,"Memory");
    mww [expr 0xFFFFE814] 0x0001372
    
    ;# -----------------------Step 3------------------- 
    ;# An NOP command is issued to the DDR2-SDRAM to 
    ;# enable clock.
    ;# ------------------------------------------------ 
    ;# DDRSDRC->DDRSDRC_MR = DDRSDRC_MR_MODE(DDRC2_MODE_NOP_CMD);

    ;#__writeMemory32(0x1,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory");
    mww [expr 0xFFFFE800] 0x1
    mww [expr 0x20000000] 0x0

    ;# A minimum pause of 200 ¦Ìs is provided to precede any signal toggle.
    sleep(200);

    ;# Now clocks which drive DDR2-SDRAM device are enabled
    
    ;# -----------------------Step 4------------------- 
    ;# An NOP command is issued to the DDR2-SDRAM 
    ;# ------------------------------------------------ 
    __writeMemory32(0x1,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");
    mww [expr 0xFFFFE800] 0x1
    mww [expr 0x20000000] 0x0
    ;# wait 400 ns min
    sleep(200);
    ;# Now CKE is driven high.

    ;# -----------------------Step 5------------------- 
    ;# An all banks precharge command is issued to the 
    ;# DDR2-SDRAM.
    ;# ------------------------------------------------ 
    
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD  
    ;#__writeMemory32(0x2,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory");
    mww [expr 0xFFFFE800] 0x2
    mww [expr 0x20000000] 0x0
    
    ;# wait 400 ns min
    sleep(1);

    ;# -----------------------Step 6------------------- 
    ;# An Extended Mode Register set (EMRS2) cycle is 
    ;# issued to chose between commercialor high 
    ;# temperature operations
    ;# ------------------------------------------------ 
   
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    ;#__writeMemory32(0x5,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x22000000,"Memory");  ;# The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 0.
    mww [expr 0xFFFFE800] 0x5
    mww [expr 0x22000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 7------------------- 
    ;# An Extended Mode Register set (EMRS3) cycle is 
    ;# issued to set all registers to 0.
    ;# ------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    ;#__writeMemory32(0x5,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x23000000,"Memory");  ;# The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 1.
    mww [expr 0xFFFFE800] 0x5
    mww [expr 0x23000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 8------------------- 
    ;# An Extended Mode Register set (EMRS1) cycle is 
    ;# issued to enable DLL.
    ;# ------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    ;#__writeMemory32(0x5,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x21000000,"Memory"); ;# The write address must be chosen so that BA[1] and BA[0] are set to 0.
    mww [expr 0xFFFFE800] 0x5
    mww [expr 0x21000000] 0x0
    ;# An additional 200 cycles of clock are required for locking DLL
    sleep(1); 

    ;# -----------------------Step 9------------------- 
    ;# Program DLL field into the Configuration Register.
    ;# -------------------------------------------------
    
    ;# HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED
    ;#tempVal = __readMemory32(0xFFFFE808,"Memory");
    ;#tempVal |= 0x80;
    ;#__writeMemory32(tempVal,0xFFFFE808,"Memory");
    set tempVal [expr [mrw 0xFFFFE808]]
    set tempVal [expr ($tempVal | 0x80)]
    mww [expr 0xFFFFE808] $tempVal
    
    ;# -----------------------Step 10------------------- 
    ;# A Mode Register set (MRS) cycle is issued to reset
    ;# DLL.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    ;#__writeMemory32(0x3,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory"); ;# The write address must be chosen so that BA[1:0] bits are set to 0.
    mww [expr 0xFFFFE800] 0x3
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 11------------------- 
    ;# An all banks precharge command is issued to the 
    ;# DDR2-SDRAM.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    ;#__writeMemory32(0x2,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory"); ;# Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    mww [expr 0xFFFFE800] 0x2
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);

    ;# -----------------------Step 12------------------- 
    ;# Two auto-refresh (CBR) cycles are provided. 
    ;# Program the auto refresh command (CBR) into the 
    ;# Mode Register.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    ;#__writeMemory32(0x4,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory"); ;# Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    mww [expr 0xFFFFE800] 0x4
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    ;# Set 2nd CBR
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    __writeMemory32(0x4,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); ;# Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    mww [expr 0xFFFFE800] 0x4
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 13------------------- 
    ;# Program DLL field into the Configuration Register
    ;# to low(Disable DLL reset).
    ;# -------------------------------------------------
    ;# HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED)  
    ;#tempVal = __readMemory32(0xFFFFE808,"Memory");
    ;#tempVal &= 0xFFFFFF7F;
    ;#__writeMemory32(tempVal,0xFFFFE808,"Memory");
    set tempVal [expr [mrw 0xFFFFE808]]
    set tempVal [expr ($tempVal | 0xFFFFFF7F)]
    mww [expr 0xFFFFE808] $tempVal
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 14------------------- 
    ;# A Mode Register set (MRS) cycle is issued to 
    ;# program the parameters of the DDR2-SDRAM devices
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    __writeMemory32(0x3,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); ;# The write address must be chosen so that BA[1:0] are set to 0.
    mww [expr 0xFFFFE800] 0x3
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 15------------------- 
    ;# Program OCD field into the Configuration Register
    ;# to high (OCD calibration default)
    ;# -------------------------------------------------
    ;#tempVal = __readMemory32(0xFFFFE808,"Memory");
    ;#tempVal |= (0x07 << 12);
    ;#__writeMemory32(tempVal,0xFFFFE808,"Memory");
    set tempVal [expr [mrw 0xFFFFE808]]
    set tempVal [expr ($tempVal | (0x07 << 12))]
    mww [expr 0xFFFFE808] $tempVal
    sleep(1);
    
    ;# -----------------------Step 16------------------- 
    ;# An Extended Mode Register set (EMRS1) cycle is 
    ;# issued to OCD default value.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    ;#__writeMemory32(0x5,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x21000000,"Memory"); ;# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
    mww [expr 0xFFFFE800] 0x5
    mww [expr 0x21000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 17------------------- 
    ;# Program OCD field into the Configuration Register 
    ;# to low (OCD calibration mode exit).
    ;# -------------------------------------------------
    ;#tempVal = __readMemory32(0xFFFFE808,"Memory");
    ;#tempVal &= 0xFFFF8FFF;
    ;#__writeMemory32(tempVal,0xFFFFE808,"Memory");
    set tempVal [expr [mrw 0xFFFFE808]]
    set tempVal [expr ($tempVal & 0xFFFF8FFF)]
    mww [expr 0xFFFFE808] $tempVal
    sleep(1);
    
    ;# -----------------------Step 18------------------- 
    ;# An Extended Mode Register set (EMRS1) cycle is 
    ;# issued to enable OCD exit.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    ;#__writeMemory32(0x5,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x21000000,"Memory"); ;# The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.
    mww [expr 0xFFFFE800] 0x5
    mww [expr 0x21000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    
    ;# -----------------------Step 19,20------------------- 
    ;# A mode Normal command is provided. Program the 
    ;# Normal mode into Mode Register.
    ;# -------------------------------------------------
    ;# HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD
    ;#__writeMemory32(0x0,0xFFFFE800,"Memory");
    ;#__writeMemory32(0x0,0x20000000,"Memory"); ;# Perform a write access to any DDR2-SDRAM address.
    mww [expr 0xFFFFE800] 0x0
    mww [expr 0x20000000] 0x0
    ;# wait 2 cycles min
    sleep(1);
    
    ;# -----------------------Step 21------------------- 
    ;# Write the refresh rate into the count field in the 
    ;# Refresh Timer register. The DDR2-SDRAM device requires a
    ;# refresh every 15.625 ¦Ìs or 7.81 ¦Ìs. With a 100 
    ;# MHz frequency, the refresh timer count register must to 
    ;# be set with (15.625 /100 MHz) = 1562 i.e. 0x061A or 
    ;# (7.81 /100MHz) = 781 i.e. 0x030d
    ;# -------------------------------------------------
    ;# HDDRSDRC2_RTR, 0x00000411
    ;#__writeMemory32(0x00000411,0xFFFFE804,"Memory");
    mww [expr 0xFFFFE804] 0x00000411

    ;# Read optimization" shall be un-selected on this revision.
    ;#__writeMemory32(0x04,0xFFFFE82C,"Memory");
    mww [expr 0xFFFFE82C] 0x04
    
    ;# OK now we are ready to work on the DDRSDR

    ;# wait for end of calibration
    sleep(1);

   ;# "------------------------------- DDRAM configuration done -------------------------------";

}

}

;#####################################################################
;# "------------------------------ execUserPreload ---------------------------------";
;# __hwReset(0);                     ;#* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
;# __writeMemory32(0xA5000007, 0xFFFFFE00,"Memory");
;# __writeMemory32(0xD3,0x98,"Register"); ;#*  Set CPSR
;# __PllSetting();                   ;#* Init PLL
;# __initDDRAM();                    ;#* Init DDRAM before load
;# _MapRAMAt0();                     ;#* Set the RAM memory at 0x0020 0000 & 0x0000 0000
;# _InitRSTC();                      ;#* Enable User Reset to allow execUserReset() execution
;# 
proc at91sam9x25ek_reset_init { } {
	at91sam9x25ek_PllSetting
	at91sam9x25ek_initDDRAM
	at91sam9x25ek_MapRAMAt0
}
